// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/sirkon/ldetool/token"
)

const (
	NoState    = -1
	NumStates  = 66
	NumSymbols = 109
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '''
3: '''
4: '!'
5: '='
6: ';'
7: '('
8: ')'
9: 'i'
10: 'n'
11: 't'
12: '8'
13: 'i'
14: 'n'
15: 't'
16: '1'
17: '6'
18: 'i'
19: 'n'
20: 't'
21: '3'
22: '2'
23: 'i'
24: 'n'
25: 't'
26: '6'
27: '4'
28: 'u'
29: 'i'
30: 'n'
31: 't'
32: '8'
33: 'u'
34: 'i'
35: 'n'
36: 't'
37: '1'
38: '6'
39: 'u'
40: 'i'
41: 'n'
42: 't'
43: '3'
44: '2'
45: 'u'
46: 'i'
47: 'n'
48: 't'
49: '6'
50: '4'
51: 'f'
52: 'l'
53: 'o'
54: 'a'
55: 't'
56: '3'
57: '2'
58: 'f'
59: 'l'
60: 'o'
61: 'a'
62: 't'
63: '6'
64: '4'
65: 's'
66: 't'
67: 'r'
68: 'i'
69: 'n'
70: 'g'
71: '^'
72: '?'
73: '?'
74: '_'
75: '['
76: ':'
77: ']'
78: '?'
79: '$'
80: '_'
81: '\'
82: '0'
83: 't'
84: 'n'
85: 'r'
86: 'a'
87: 'b'
88: '"'
89: '\'
90: '\'
91: '0'
92: 't'
93: 'n'
94: 'r'
95: 'a'
96: 'b'
97: '''
98: '\'
99: '#'
100: '\n'
101: ' '
102: '\t'
103: '\n'
104: '\r'
105: '0'-'9'
106: 'a'-'z'
107: 'A'-'Z'
108: .
*/
