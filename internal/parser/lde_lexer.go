// Code generated from LDE.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 22, 137,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7,
	3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12,
	3, 13, 3, 13, 3, 14, 3, 14, 7, 14, 74, 10, 14, 12, 14, 14, 14, 77, 11,
	14, 3, 15, 3, 15, 7, 15, 81, 10, 15, 12, 15, 14, 15, 84, 11, 15, 3, 15,
	3, 15, 6, 15, 88, 10, 15, 13, 15, 14, 15, 89, 3, 16, 6, 16, 93, 10, 16,
	13, 16, 14, 16, 94, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 7, 18, 103,
	10, 18, 12, 18, 14, 18, 106, 11, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19,
	3, 20, 3, 20, 3, 20, 7, 20, 116, 10, 20, 12, 20, 14, 20, 119, 11, 20, 3,
	20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 7, 22, 129, 10, 22,
	12, 22, 14, 22, 132, 11, 22, 3, 22, 3, 22, 3, 23, 3, 23, 4, 104, 117, 2,
	24, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12,
	23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 2, 35, 18, 37, 2, 39, 19, 41,
	20, 43, 21, 45, 22, 3, 2, 8, 5, 2, 67, 92, 97, 97, 99, 124, 6, 2, 50, 59,
	67, 92, 97, 97, 99, 124, 3, 2, 50, 59, 4, 2, 11, 12, 15, 15, 5, 2, 11,
	12, 15, 15, 34, 34, 4, 2, 12, 12, 15, 15, 2, 143, 2, 3, 3, 2, 2, 2, 2,
	5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2,
	13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2,
	2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2,
	2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 39, 3, 2,
	2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 3, 47, 3,
	2, 2, 2, 5, 49, 3, 2, 2, 2, 7, 51, 3, 2, 2, 2, 9, 53, 3, 2, 2, 2, 11, 55,
	3, 2, 2, 2, 13, 57, 3, 2, 2, 2, 15, 59, 3, 2, 2, 2, 17, 61, 3, 2, 2, 2,
	19, 63, 3, 2, 2, 2, 21, 65, 3, 2, 2, 2, 23, 67, 3, 2, 2, 2, 25, 69, 3,
	2, 2, 2, 27, 71, 3, 2, 2, 2, 29, 78, 3, 2, 2, 2, 31, 92, 3, 2, 2, 2, 33,
	96, 3, 2, 2, 2, 35, 99, 3, 2, 2, 2, 37, 109, 3, 2, 2, 2, 39, 112, 3, 2,
	2, 2, 41, 122, 3, 2, 2, 2, 43, 126, 3, 2, 2, 2, 45, 135, 3, 2, 2, 2, 47,
	48, 7, 63, 2, 2, 48, 4, 3, 2, 2, 2, 49, 50, 7, 61, 2, 2, 50, 6, 3, 2, 2,
	2, 51, 52, 7, 42, 2, 2, 52, 8, 3, 2, 2, 2, 53, 54, 7, 43, 2, 2, 54, 10,
	3, 2, 2, 2, 55, 56, 7, 96, 2, 2, 56, 12, 3, 2, 2, 2, 57, 58, 7, 93, 2,
	2, 58, 14, 3, 2, 2, 2, 59, 60, 7, 95, 2, 2, 60, 16, 3, 2, 2, 2, 61, 62,
	7, 65, 2, 2, 62, 18, 3, 2, 2, 2, 63, 64, 7, 97, 2, 2, 64, 20, 3, 2, 2,
	2, 65, 66, 7, 60, 2, 2, 66, 22, 3, 2, 2, 2, 67, 68, 7, 38, 2, 2, 68, 24,
	3, 2, 2, 2, 69, 70, 7, 128, 2, 2, 70, 26, 3, 2, 2, 2, 71, 75, 9, 2, 2,
	2, 72, 74, 9, 3, 2, 2, 73, 72, 3, 2, 2, 2, 74, 77, 3, 2, 2, 2, 75, 73,
	3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 28, 3, 2, 2, 2, 77, 75, 3, 2, 2, 2,
	78, 82, 9, 2, 2, 2, 79, 81, 9, 3, 2, 2, 80, 79, 3, 2, 2, 2, 81, 84, 3,
	2, 2, 2, 82, 80, 3, 2, 2, 2, 82, 83, 3, 2, 2, 2, 83, 85, 3, 2, 2, 2, 84,
	82, 3, 2, 2, 2, 85, 87, 7, 48, 2, 2, 86, 88, 9, 4, 2, 2, 87, 86, 3, 2,
	2, 2, 88, 89, 3, 2, 2, 2, 89, 87, 3, 2, 2, 2, 89, 90, 3, 2, 2, 2, 90, 30,
	3, 2, 2, 2, 91, 93, 9, 4, 2, 2, 92, 91, 3, 2, 2, 2, 93, 94, 3, 2, 2, 2,
	94, 92, 3, 2, 2, 2, 94, 95, 3, 2, 2, 2, 95, 32, 3, 2, 2, 2, 96, 97, 7,
	94, 2, 2, 97, 98, 7, 36, 2, 2, 98, 34, 3, 2, 2, 2, 99, 104, 7, 36, 2, 2,
	100, 103, 5, 33, 17, 2, 101, 103, 10, 5, 2, 2, 102, 100, 3, 2, 2, 2, 102,
	101, 3, 2, 2, 2, 103, 106, 3, 2, 2, 2, 104, 105, 3, 2, 2, 2, 104, 102,
	3, 2, 2, 2, 105, 107, 3, 2, 2, 2, 106, 104, 3, 2, 2, 2, 107, 108, 7, 36,
	2, 2, 108, 36, 3, 2, 2, 2, 109, 110, 7, 94, 2, 2, 110, 111, 7, 41, 2, 2,
	111, 38, 3, 2, 2, 2, 112, 117, 7, 41, 2, 2, 113, 116, 5, 37, 19, 2, 114,
	116, 10, 5, 2, 2, 115, 113, 3, 2, 2, 2, 115, 114, 3, 2, 2, 2, 116, 119,
	3, 2, 2, 2, 117, 118, 3, 2, 2, 2, 117, 115, 3, 2, 2, 2, 118, 120, 3, 2,
	2, 2, 119, 117, 3, 2, 2, 2, 120, 121, 7, 41, 2, 2, 121, 40, 3, 2, 2, 2,
	122, 123, 9, 6, 2, 2, 123, 124, 3, 2, 2, 2, 124, 125, 8, 21, 2, 2, 125,
	42, 3, 2, 2, 2, 126, 130, 7, 37, 2, 2, 127, 129, 10, 7, 2, 2, 128, 127,
	3, 2, 2, 2, 129, 132, 3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 130, 131, 3, 2,
	2, 2, 131, 133, 3, 2, 2, 2, 132, 130, 3, 2, 2, 2, 133, 134, 8, 22, 2, 2,
	134, 44, 3, 2, 2, 2, 135, 136, 7, 35, 2, 2, 136, 46, 3, 2, 2, 2, 12, 2,
	75, 82, 89, 94, 102, 104, 115, 117, 130, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'='", "';'", "'('", "')'", "'^'", "'['", "']'", "'?'", "'_'", "':'",
	"'$'", "'~'", "", "", "", "", "", "", "", "'!'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "Identifier", "IdentifierWithFraction",
	"IntLit", "StringLit", "CharLit", "WS", "LineComment", "Stress",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "Identifier", "IdentifierWithFraction", "IntLit",
	"EscapedQuote", "StringLit", "EscapedApo", "CharLit", "WS", "LineComment",
	"Stress",
}

type LDELexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewLDELexer(input antlr.CharStream) *LDELexer {

	l := new(LDELexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "LDE.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// LDELexer tokens.
const (
	LDELexerT__0                   = 1
	LDELexerT__1                   = 2
	LDELexerT__2                   = 3
	LDELexerT__3                   = 4
	LDELexerT__4                   = 5
	LDELexerT__5                   = 6
	LDELexerT__6                   = 7
	LDELexerT__7                   = 8
	LDELexerT__8                   = 9
	LDELexerT__9                   = 10
	LDELexerT__10                  = 11
	LDELexerT__11                  = 12
	LDELexerIdentifier             = 13
	LDELexerIdentifierWithFraction = 14
	LDELexerIntLit                 = 15
	LDELexerStringLit              = 16
	LDELexerCharLit                = 17
	LDELexerWS                     = 18
	LDELexerLineComment            = 19
	LDELexerStress                 = 20
)
