// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"identifier",
		"=",
		";",
		"(",
		")",
		"stress",
		"int8",
		"int16",
		"int32",
		"int64",
		"uint8",
		"uint16",
		"uint32",
		"uint64",
		"float32",
		"float64",
		"string",
		"^",
		"string_lit",
		"char_lit",
		"??",
		"_",
		"[",
		"int_lit",
		":",
		"]",
		"?",
	},

	idMap: map[string]Type{
		"INVALID":    0,
		"$":          1,
		"identifier": 2,
		"=":          3,
		";":          4,
		"(":          5,
		")":          6,
		"stress":     7,
		"int8":       8,
		"int16":      9,
		"int32":      10,
		"int64":      11,
		"uint8":      12,
		"uint16":     13,
		"uint32":     14,
		"uint64":     15,
		"float32":    16,
		"float64":    17,
		"string":     18,
		"^":          19,
		"string_lit": 20,
		"char_lit":   21,
		"??":         22,
		"_":          23,
		"[":          24,
		"int_lit":    25,
		":":          26,
		"]":          27,
		"?":          28,
	},
}
